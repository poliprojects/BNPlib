// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: output.proto

#include "output.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_output_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IterationOutput_output_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_output_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniqueValues_output_2eproto;
class UniqueValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UniqueValues> _instance;
} _UniqueValues_default_instance_;
class IterationOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IterationOutput> _instance;
} _IterationOutput_default_instance_;
class ChainOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChainOutput> _instance;
} _ChainOutput_default_instance_;
static void InitDefaultsscc_info_ChainOutput_output_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChainOutput_default_instance_;
    new (ptr) ::ChainOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChainOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChainOutput_output_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChainOutput_output_2eproto}, {
      &scc_info_IterationOutput_output_2eproto.base,}};

static void InitDefaultsscc_info_IterationOutput_output_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_IterationOutput_default_instance_;
    new (ptr) ::IterationOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IterationOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IterationOutput_output_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IterationOutput_output_2eproto}, {
      &scc_info_UniqueValues_output_2eproto.base,}};

static void InitDefaultsscc_info_UniqueValues_output_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UniqueValues_default_instance_;
    new (ptr) ::UniqueValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UniqueValues::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniqueValues_output_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UniqueValues_output_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_output_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_output_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_output_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_output_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::UniqueValues, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UniqueValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UniqueValues, params_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::IterationOutput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::IterationOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IterationOutput, allocations_),
  PROTOBUF_FIELD_OFFSET(::IterationOutput, phi_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ChainOutput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChainOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChainOutput, state_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::UniqueValues)},
  { 7, 14, sizeof(::IterationOutput)},
  { 16, 22, sizeof(::ChainOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UniqueValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IterationOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChainOutput_default_instance_),
};

const char descriptor_table_protodef_output_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014output.proto\"\036\n\014UniqueValues\022\016\n\006params"
  "\030\001 \003(\001\"B\n\017IterationOutput\022\023\n\013allocations"
  "\030\001 \003(\005\022\032\n\003phi\030\002 \003(\0132\r.UniqueValues\".\n\013Ch"
  "ainOutput\022\037\n\005state\030\001 \003(\0132\020.IterationOutp"
  "ut"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_output_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_output_2eproto_sccs[3] = {
  &scc_info_ChainOutput_output_2eproto.base,
  &scc_info_IterationOutput_output_2eproto.base,
  &scc_info_UniqueValues_output_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_output_2eproto_once;
static bool descriptor_table_output_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_output_2eproto = {
  &descriptor_table_output_2eproto_initialized, descriptor_table_protodef_output_2eproto, "output.proto", 162,
  &descriptor_table_output_2eproto_once, descriptor_table_output_2eproto_sccs, descriptor_table_output_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_output_2eproto::offsets,
  file_level_metadata_output_2eproto, 3, file_level_enum_descriptors_output_2eproto, file_level_service_descriptors_output_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_output_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_output_2eproto), true);

// ===================================================================

void UniqueValues::InitAsDefaultInstance() {
}
class UniqueValues::_Internal {
 public:
  using HasBits = decltype(std::declval<UniqueValues>()._has_bits_);
};

UniqueValues::UniqueValues()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UniqueValues)
}
UniqueValues::UniqueValues(const UniqueValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UniqueValues)
}

void UniqueValues::SharedCtor() {
}

UniqueValues::~UniqueValues() {
  // @@protoc_insertion_point(destructor:UniqueValues)
  SharedDtor();
}

void UniqueValues::SharedDtor() {
}

void UniqueValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UniqueValues& UniqueValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UniqueValues_output_2eproto.base);
  return *internal_default_instance();
}


void UniqueValues::Clear() {
// @@protoc_insertion_point(message_clear_start:UniqueValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UniqueValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_params(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_params(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniqueValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UniqueValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double params = 1;
  for (int i = 0, n = this->_internal_params_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_params(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UniqueValues)
  return target;
}

size_t UniqueValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UniqueValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double params = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_params_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_params_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniqueValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UniqueValues)
  GOOGLE_DCHECK_NE(&from, this);
  const UniqueValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UniqueValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UniqueValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UniqueValues)
    MergeFrom(*source);
  }
}

void UniqueValues::MergeFrom(const UniqueValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UniqueValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
}

void UniqueValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UniqueValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniqueValues::CopyFrom(const UniqueValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UniqueValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueValues::IsInitialized() const {
  return true;
}

void UniqueValues::InternalSwap(UniqueValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  params_.InternalSwap(&other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UniqueValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IterationOutput::InitAsDefaultInstance() {
}
class IterationOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<IterationOutput>()._has_bits_);
};

IterationOutput::IterationOutput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IterationOutput)
}
IterationOutput::IterationOutput(const IterationOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      allocations_(from.allocations_),
      phi_(from.phi_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IterationOutput)
}

void IterationOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IterationOutput_output_2eproto.base);
}

IterationOutput::~IterationOutput() {
  // @@protoc_insertion_point(destructor:IterationOutput)
  SharedDtor();
}

void IterationOutput::SharedDtor() {
}

void IterationOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IterationOutput& IterationOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IterationOutput_output_2eproto.base);
  return *internal_default_instance();
}


void IterationOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:IterationOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allocations_.Clear();
  phi_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IterationOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 allocations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_allocations(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_allocations(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .UniqueValues phi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IterationOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IterationOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 allocations = 1;
  for (int i = 0, n = this->_internal_allocations_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_allocations(i), target);
  }

  // repeated .UniqueValues phi = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phi_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_phi(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IterationOutput)
  return target;
}

size_t IterationOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IterationOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 allocations = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->allocations_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_allocations_size());
    total_size += data_size;
  }

  // repeated .UniqueValues phi = 2;
  total_size += 1UL * this->_internal_phi_size();
  for (const auto& msg : this->phi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IterationOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IterationOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const IterationOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IterationOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IterationOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IterationOutput)
    MergeFrom(*source);
  }
}

void IterationOutput::MergeFrom(const IterationOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IterationOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allocations_.MergeFrom(from.allocations_);
  phi_.MergeFrom(from.phi_);
}

void IterationOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IterationOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IterationOutput::CopyFrom(const IterationOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IterationOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IterationOutput::IsInitialized() const {
  return true;
}

void IterationOutput::InternalSwap(IterationOutput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  allocations_.InternalSwap(&other->allocations_);
  phi_.InternalSwap(&other->phi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IterationOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChainOutput::InitAsDefaultInstance() {
}
class ChainOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<ChainOutput>()._has_bits_);
};

ChainOutput::ChainOutput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChainOutput)
}
ChainOutput::ChainOutput(const ChainOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      state_(from.state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChainOutput)
}

void ChainOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChainOutput_output_2eproto.base);
}

ChainOutput::~ChainOutput() {
  // @@protoc_insertion_point(destructor:ChainOutput)
  SharedDtor();
}

void ChainOutput::SharedDtor() {
}

void ChainOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChainOutput& ChainOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChainOutput_output_2eproto.base);
  return *internal_default_instance();
}


void ChainOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:ChainOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChainOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IterationOutput state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChainOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChainOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IterationOutput state = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_state(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChainOutput)
  return target;
}

size_t ChainOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChainOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IterationOutput state = 1;
  total_size += 1UL * this->_internal_state_size();
  for (const auto& msg : this->state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChainOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChainOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const ChainOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChainOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChainOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChainOutput)
    MergeFrom(*source);
  }
}

void ChainOutput::MergeFrom(const ChainOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChainOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  state_.MergeFrom(from.state_);
}

void ChainOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChainOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainOutput::CopyFrom(const ChainOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChainOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainOutput::IsInitialized() const {
  return true;
}

void ChainOutput::InternalSwap(ChainOutput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  state_.InternalSwap(&other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChainOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UniqueValues* Arena::CreateMaybeMessage< ::UniqueValues >(Arena* arena) {
  return Arena::CreateInternal< ::UniqueValues >(arena);
}
template<> PROTOBUF_NOINLINE ::IterationOutput* Arena::CreateMaybeMessage< ::IterationOutput >(Arena* arena) {
  return Arena::CreateInternal< ::IterationOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::ChainOutput* Arena::CreateMaybeMessage< ::ChainOutput >(Arena* arena) {
  return Arena::CreateInternal< ::ChainOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
