// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
class Output;
class OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
class Output_UniqueValues;
class Output_UniqueValuesDefaultTypeInternal;
extern Output_UniqueValuesDefaultTypeInternal _Output_UniqueValues_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Output* Arena::CreateMaybeMessage<::Output>(Arena*);
template<> ::Output_UniqueValues* Arena::CreateMaybeMessage<::Output_UniqueValues>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Output_UniqueValues :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Output.UniqueValues) */ {
 public:
  Output_UniqueValues();
  virtual ~Output_UniqueValues();

  Output_UniqueValues(const Output_UniqueValues& from);
  Output_UniqueValues(Output_UniqueValues&& from) noexcept
    : Output_UniqueValues() {
    *this = ::std::move(from);
  }

  inline Output_UniqueValues& operator=(const Output_UniqueValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline Output_UniqueValues& operator=(Output_UniqueValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Output_UniqueValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Output_UniqueValues* internal_default_instance() {
    return reinterpret_cast<const Output_UniqueValues*>(
               &_Output_UniqueValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Output_UniqueValues& a, Output_UniqueValues& b) {
    a.Swap(&b);
  }
  inline void Swap(Output_UniqueValues* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Output_UniqueValues* New() const final {
    return CreateMaybeMessage<Output_UniqueValues>(nullptr);
  }

  Output_UniqueValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Output_UniqueValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Output_UniqueValues& from);
  void MergeFrom(const Output_UniqueValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Output_UniqueValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Output.UniqueValues";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // repeated double params = 1;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  double _internal_params(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_params() const;
  void _internal_add_params(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_params();
  public:
  double params(int index) const;
  void set_params(int index, double value);
  void add_params(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_params();

  // @@protoc_insertion_point(class_scope:Output.UniqueValues)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > params_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Output :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Output) */ {
 public:
  Output();
  virtual ~Output();

  Output(const Output& from);
  Output(Output&& from) noexcept
    : Output() {
    *this = ::std::move(from);
  }

  inline Output& operator=(const Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline Output& operator=(Output&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Output* internal_default_instance() {
    return reinterpret_cast<const Output*>(
               &_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Output& a, Output& b) {
    a.Swap(&b);
  }
  inline void Swap(Output* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Output* New() const final {
    return CreateMaybeMessage<Output>(nullptr);
  }

  Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Output>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Output& from);
  void MergeFrom(const Output& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Output* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Output";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Output_UniqueValues UniqueValues;

  // accessors -------------------------------------------------------

  enum : int {
    kAllocationsFieldNumber = 1,
    kPhiFieldNumber = 2,
  };
  // repeated int32 allocations = 1;
  int allocations_size() const;
  private:
  int _internal_allocations_size() const;
  public:
  void clear_allocations();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_allocations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_allocations() const;
  void _internal_add_allocations(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_allocations();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 allocations(int index) const;
  void set_allocations(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_allocations(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      allocations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_allocations();

  // repeated .Output.UniqueValues phi = 2;
  int phi_size() const;
  private:
  int _internal_phi_size() const;
  public:
  void clear_phi();
  ::Output_UniqueValues* mutable_phi(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Output_UniqueValues >*
      mutable_phi();
  private:
  const ::Output_UniqueValues& _internal_phi(int index) const;
  ::Output_UniqueValues* _internal_add_phi();
  public:
  const ::Output_UniqueValues& phi(int index) const;
  ::Output_UniqueValues* add_phi();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Output_UniqueValues >&
      phi() const;

  // @@protoc_insertion_point(class_scope:Output)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > allocations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Output_UniqueValues > phi_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Output_UniqueValues

// repeated double params = 1;
inline int Output_UniqueValues::_internal_params_size() const {
  return params_.size();
}
inline int Output_UniqueValues::params_size() const {
  return _internal_params_size();
}
inline void Output_UniqueValues::clear_params() {
  params_.Clear();
}
inline double Output_UniqueValues::_internal_params(int index) const {
  return params_.Get(index);
}
inline double Output_UniqueValues::params(int index) const {
  // @@protoc_insertion_point(field_get:Output.UniqueValues.params)
  return _internal_params(index);
}
inline void Output_UniqueValues::set_params(int index, double value) {
  params_.Set(index, value);
  // @@protoc_insertion_point(field_set:Output.UniqueValues.params)
}
inline void Output_UniqueValues::_internal_add_params(double value) {
  params_.Add(value);
}
inline void Output_UniqueValues::add_params(double value) {
  _internal_add_params(value);
  // @@protoc_insertion_point(field_add:Output.UniqueValues.params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Output_UniqueValues::_internal_params() const {
  return params_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Output_UniqueValues::params() const {
  // @@protoc_insertion_point(field_list:Output.UniqueValues.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Output_UniqueValues::_internal_mutable_params() {
  return &params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Output_UniqueValues::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Output.UniqueValues.params)
  return _internal_mutable_params();
}

// -------------------------------------------------------------------

// Output

// repeated int32 allocations = 1;
inline int Output::_internal_allocations_size() const {
  return allocations_.size();
}
inline int Output::allocations_size() const {
  return _internal_allocations_size();
}
inline void Output::clear_allocations() {
  allocations_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Output::_internal_allocations(int index) const {
  return allocations_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Output::allocations(int index) const {
  // @@protoc_insertion_point(field_get:Output.allocations)
  return _internal_allocations(index);
}
inline void Output::set_allocations(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  allocations_.Set(index, value);
  // @@protoc_insertion_point(field_set:Output.allocations)
}
inline void Output::_internal_add_allocations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  allocations_.Add(value);
}
inline void Output::add_allocations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_allocations(value);
  // @@protoc_insertion_point(field_add:Output.allocations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Output::_internal_allocations() const {
  return allocations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Output::allocations() const {
  // @@protoc_insertion_point(field_list:Output.allocations)
  return _internal_allocations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Output::_internal_mutable_allocations() {
  return &allocations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Output::mutable_allocations() {
  // @@protoc_insertion_point(field_mutable_list:Output.allocations)
  return _internal_mutable_allocations();
}

// repeated .Output.UniqueValues phi = 2;
inline int Output::_internal_phi_size() const {
  return phi_.size();
}
inline int Output::phi_size() const {
  return _internal_phi_size();
}
inline void Output::clear_phi() {
  phi_.Clear();
}
inline ::Output_UniqueValues* Output::mutable_phi(int index) {
  // @@protoc_insertion_point(field_mutable:Output.phi)
  return phi_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Output_UniqueValues >*
Output::mutable_phi() {
  // @@protoc_insertion_point(field_mutable_list:Output.phi)
  return &phi_;
}
inline const ::Output_UniqueValues& Output::_internal_phi(int index) const {
  return phi_.Get(index);
}
inline const ::Output_UniqueValues& Output::phi(int index) const {
  // @@protoc_insertion_point(field_get:Output.phi)
  return _internal_phi(index);
}
inline ::Output_UniqueValues* Output::_internal_add_phi() {
  return phi_.Add();
}
inline ::Output_UniqueValues* Output::add_phi() {
  // @@protoc_insertion_point(field_add:Output.phi)
  return _internal_add_phi();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Output_UniqueValues >&
Output::phi() const {
  // @@protoc_insertion_point(field_list:Output.phi)
  return phi_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
